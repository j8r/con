crystal_doc_search_index_callback({"repository_name":"github.com/j8r/con","body":"# CON\n\n[![Build Status](https://cloud.drone.io/api/badges/j8r/con/status.svg)](https://cloud.drone.io/j8r/con)\n[![ISC](https://img.shields.io/badge/License-ISC-blue.svg?style=flat-square)](https://en.wikipedia.org/wiki/ISC_license)\n\nCretin Object Notation - a simple, fast and readable JSON-compatible serialization format\n\nThe specifications is mostly stable, but can be subject to minor changes.\n\n## Example\n\n```hcl\nkey \"string\"\npi 3.14\nhash {\n  enable true\n  nothing nil\n}\nports [\n  22\n  1234\n  8888\n]\n```\n\n## Features\n\n- Backward compatible with JSON\n- Easy to read, fast to parse\n- Simple specifications\n\n## Documentation\n\nhttps://j8r.github.io/con\n\n## Specifications\n\nSpecification document: [SPEC.md](SPEC.md)\n\n## Usage\n\nAdd the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  con:\n    github: j8r/con\n```\n\n\nThis object is a convenient container.\n\nA `CON::Any` can be converted back to either a CON or JSON serialized `String`\n\n\n```crystal\nrequire \"con\"\n\ncon_any = CON.parse con_data\ncon_any.to_con\n\nrequire \"json\"\ncon_any.to_json\n```\n\n`CON::PullParser` can be used to parse more efficiently, if the mapping is known in advance.\n\nSee [spec](spec) for more test examples.\n\n## Benchmarks\n\nThere are benchmarks comparing `CON` and the stdlib's `JSON` implementation\n\n`crystal run --release benchmark/*`\n\nSome results:\n\n```\n CON.parse minified 527.25k (  1.90µs) (±13.77%)  1.88kB/op        fastest\n   CON.parse pretty 501.42k (  1.99µs) (±15.08%)  1.88kB/op   1.05× slower\nJSON.parse minified 487.52k (  2.05µs) (± 9.05%)  2.08kB/op   1.08× slower\n  JSON.parse pretty 409.80k (  2.44µs) (± 9.13%)  2.08kB/op   1.29× slower\n```\n\n```\n        #to_con   1.17M (852.99ns) (± 3.51%)  320B/op        fastest\n #to_pretty_con   1.10M (908.96ns) (± 5.76%)  320B/op   1.07× slower\n       #to_json 742.97k (  1.35µs) (±14.52%)  576B/op   1.58× slower\n#to_pretty_json 612.21k (  1.63µs) (±13.04%)  848B/op   1.91× slower\n```\n\n## License\n\nCopyright (c) 2018-2019 Julien Reichardt - ISC License\n","program":{"html_id":"github.com/j8r/con/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/j8r/con","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/j8r/con/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/j8r/con/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/j8r/con/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":61,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"any.cr","line_number":320,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"},{"filename":"from_con.cr","line_number":57,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[{"id":"from_con(pull:CON::PullParser):Array(T)-class-method","html_id":"from_con(pull:CON::PullParser):Array(T)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : Array(T)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L58","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"if !(value = pull.read_value_unchecked).is_a?(CON::Token::BeginArray)\n  pull.type_error(value, CON::Token::BeginArray)\nend\nArray(T).from_con(nil, pull)\n"}}],"constructors":[],"instance_methods":[{"id":"==(other:CON::Any)-instance-method","html_id":"==(other:CON::Any)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L321","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == other.raw"}},{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L62","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.array do\n  each do |element|\n    con.value(element)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/BigDecimal","path":"BigDecimal.html","kind":"struct","full_name":"BigDecimal","name":"BigDecimal","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"big.cr","line_number":13,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"from_con(value,pull:CON::PullParser):BigDecimal-class-method","html_id":"from_con(value,pull:CON::PullParser):BigDecimal-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser) : BigDecimal","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr#L13","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigDecimal","visibility":"Public","body":"BigDecimal.new(pull.expect(value, (String | Int64) | Float64))"}},{"id":"from_con(pull:CON::PullParser):BigDecimal-class-method","html_id":"from_con(pull:CON::PullParser):BigDecimal-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : BigDecimal","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr#L13","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigDecimal","visibility":"Public","body":"BigDecimal.from_con(pull.read_value, pull)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/BigFloat","path":"BigFloat.html","kind":"struct","full_name":"BigFloat","name":"BigFloat","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Float","kind":"struct","full_name":"Float","name":"Float"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Float","kind":"struct","full_name":"Float","name":"Float"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"big.cr","line_number":13,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `BigFloat` can represent arbitrarily large floats.\n\nIt is implemented under the hood with [GMP](https://gmplib.org/).","summary":"<p>A <code><a href=\"BigFloat.html\">BigFloat</a></code> can represent arbitrarily large floats.</p>","class_methods":[],"constructors":[{"id":"from_con(value,pull:CON::PullParser):BigFloat-class-method","html_id":"from_con(value,pull:CON::PullParser):BigFloat-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser) : BigFloat","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr#L13","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigFloat","visibility":"Public","body":"BigFloat.new(pull.expect(value, (String | Int64) | Float64))"}},{"id":"from_con(pull:CON::PullParser):BigFloat-class-method","html_id":"from_con(pull:CON::PullParser):BigFloat-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : BigFloat","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr#L13","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigFloat","visibility":"Public","body":"BigFloat.from_con(pull.read_value, pull)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/BigInt","path":"BigInt.html","kind":"struct","full_name":"BigInt","name":"BigInt","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"big.cr","line_number":3,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `BigInt` can represent arbitrarily large integers.\n\nIt is implemented under the hood with [GMP](https://gmplib.org/).","summary":"<p>A <code><a href=\"BigInt.html\">BigInt</a></code> can represent arbitrarily large integers.</p>","class_methods":[],"constructors":[{"id":"from_con(value,pull:CON::PullParser):BigInt-class-method","html_id":"from_con(value,pull:CON::PullParser):BigInt-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser) : BigInt","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr#L8","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"BigInt.new(pull.expect(value, Int64 | String))"}},{"id":"from_con(pull:CON::PullParser):BigInt-class-method","html_id":"from_con(pull:CON::PullParser):BigInt-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : BigInt","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/big.cr#L4","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"BigInt.from_con(pull.read_value, pull)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Bool","path":"Bool.html","kind":"struct","full_name":"Bool","name":"Bool","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":43,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Bool has only two possible values: `true` and `false`. They are constructed using these literals:\n\n```\ntrue  # A Bool that is true\nfalse # A Bool that is false\n```","summary":"<p>Bool has only two possible values: <code>true</code> and <code>false</code>.</p>","class_methods":[],"constructors":[{"id":"from_con(pull:CON::PullParser):Bool-class-method","html_id":"from_con(pull:CON::PullParser):Bool-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : Bool","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L9","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"Bool.from_con(pull.read_value, pull)"}}],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L44","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.bool(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON","path":"CON.html","kind":"module","full_name":"CON","name":"CON","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lexer.cr","line_number":3,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"},{"filename":"builder.cr","line_number":3,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr"},{"filename":"con.cr","line_number":1,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"build(io:IO,indent:String?=nil,&block)-class-method","html_id":"build(io:IO,indent:String?=nil,&amp;block)-class-method","name":"build","doc":"Writes CON into the given `IO`. A `CON::Builder` is yielded to the block.","summary":"<p>Writes CON into the given <code>IO</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"indent","doc":null,"default_value":"nil","external_name":"indent","restriction":"String | ::Nil"}],"args_string":"(io : IO, indent : String? = <span class=\"n\">nil</span>, &block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L248","def":{"name":"build","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"indent","doc":null,"default_value":"nil","external_name":"indent","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"builder = CON::Builder.new(io, indent)\nyield builder\n"}},{"id":"build(indent=nil,&block)-class-method","html_id":"build(indent=nil,&amp;block)-class-method","name":"build","doc":"Returns the resulting `String` of writing CON to the yielded `CON::Builder`.\n\n```\nrequire \"con\"\n\nstring = CON.build do |con|\n  con.hash do\n    con.field \"name\", \"foo\"\n    con.hash \"values\" do\n      con.array do\n        con.value 1\n        con.value 2\n        con.value 3\n      end\n    end\n  end\nend\nstring # => %<name \"foo\" values[1 2 3]>\n```","summary":"<p>Returns the resulting <code><a href=\"String.html\">String</a></code> of writing CON to the yielded <code><a href=\"CON/Builder.html\">CON::Builder</a></code>.</p>","abstract":false,"args":[{"name":"indent","doc":null,"default_value":"nil","external_name":"indent","restriction":""}],"args_string":"(indent = <span class=\"n\">nil</span>, &block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L239","def":{"name":"build","args":[{"name":"indent","doc":null,"default_value":"nil","external_name":"indent","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |str|\n  build(str, indent) do |con|\n    yield con\n  end\nend"}},{"id":"parse(source:String|IO):Any-class-method","html_id":"parse(source:String|IO):Any-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String | IO"}],"args_string":"(source : String | IO) : Any","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L6","def":{"name":"parse","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"CON::Any.from_con(CON::PullParser.new(source))"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/j8r/con/CON/Any","path":"CON/Any.html","kind":"struct","full_name":"CON::Any","name":"Any","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"any.cr","line_number":4,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":null,"summary":null,"class_methods":[{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":"Initializing document","summary":"<p>Initializing document</p>","abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L9","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case first_key = pull.read_key_unchecked\nwhen String\n  hash = Hash(String, Any).new\n  hash[first_key] = new(pull.read_value_unchecked, pull)\n  pull.read_document do |key|\n    hash[key] = new(pull.read_value_unchecked, pull)\n  end\n  new(hash)\nelse\n  new(first_key, pull)\nend"}}],"constructors":[{"id":"new(token:Token,pull:CON::PullParser)-class-method","html_id":"new(token:Token,pull:CON::PullParser)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(token : Token, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L28","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case token\nwhen Token::BeginHash\n  hash = Hash(String, Any).new\n  pull.read_hash_unchecked do |key|\n    hash[key] = new(pull.read_value_unchecked, pull)\n  end\n  new(hash)\nwhen Token::BeginArray\n  array = Array(Any).new\n  pull.read_array_unchecked do |element|\n    array << (new(element, pull))\n  end\n  new(array)\nelse\n  raise(\"Unexpected token: #{token}\")\nend"}},{"id":"new(raw:Type,pull:CON::PullParser?=nil)-class-method","html_id":"new(raw:Type,pull:CON::PullParser?=nil)-class-method","name":"new","doc":"Creates a `CON::Any` that wraps the given value.","summary":"<p>Creates a <code><a href=\"../CON/Any.html\">CON::Any</a></code> that wraps the given value.</p>","abstract":false,"args":[{"name":"raw","doc":null,"default_value":"","external_name":"raw","restriction":"Type"},{"name":"pull","doc":null,"default_value":"nil","external_name":"pull","restriction":"CON::PullParser | ::Nil"}],"args_string":"(raw : Type, pull : CON::PullParser? = <span class=\"n\">nil</span>)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L48","def":{"name":"new","args":[{"name":"raw","doc":null,"default_value":"","external_name":"raw","restriction":"Type"},{"name":"pull","doc":null,"default_value":"nil","external_name":"pull","restriction":"CON::PullParser | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(raw, pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Returns `true` if the raw object is equal to *other*.","summary":"<p>Returns <code>true</code> if the raw object is equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L261","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raw == other"}},{"id":"==(other:CON::Any)-instance-method","html_id":"==(other:CON::Any)-instance-method","name":"==","doc":"Returns `true` if both `self` and *other*'s raw object are equal.","summary":"<p>Returns <code>true</code> if both <code>self</code> and <em>other</em>'s raw object are equal.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L256","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raw == other.raw"}},{"id":"[](index:Int):CON::Any-instance-method","html_id":"[](index:Int):CON::Any-instance-method","name":"[]","doc":"Assumes the underlying value is an `Array` and returns the element\nat the given index.\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is an <code><a href=\"../Array.html\">Array</a></code> and returns the element at the given index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : CON::Any","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L67","def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CON::Any","visibility":"Public","body":"case object = @raw\nwhen Array\n  object[index]\nelse\n  raise(\"Expected Array for #[](index : Int), not #{object.class}\")\nend"}},{"id":"[](key:String):CON::Any-instance-method","html_id":"[](key:String):CON::Any-instance-method","name":"[]","doc":"Assumes the underlying value is a `Hash` and returns the element\nwith the given key.\nRaises if the underlying value is not a `Hash`.","summary":"<p>Assumes the underlying value is a <code><a href=\"../Hash.html\">Hash</a></code> and returns the element with the given key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String) : CON::Any","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L91","def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CON::Any","visibility":"Public","body":"case object = @raw\nwhen Hash\n  object[key]\nelse\n  raise(\"Expected Hash for #[](key : String), not #{object.class}\")\nend"}},{"id":"[]?(index:Int):CON::Any?-instance-method","html_id":"[]?(index:Int):CON::Any?-instance-method","name":"[]?","doc":"Assumes the underlying value is an `Array` and returns the element\nat the given index, or `nil` if out of bounds.\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is an <code><a href=\"../Array.html\">Array</a></code> and returns the element at the given index, or <code>nil</code> if out of bounds.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : CON::Any?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L79","def":{"name":"[]?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CON::Any | ::Nil","visibility":"Public","body":"case object = @raw\nwhen Array\n  object[index]?\nelse\n  raise(\"Expected Array for #[]?(index : Int), not #{object.class}\")\nend"}},{"id":"[]?(key:String):CON::Any?-instance-method","html_id":"[]?(key:String):CON::Any?-instance-method","name":"[]?","doc":"Assumes the underlying value is a `Hash` and returns the element\nwith the given key, or `nil` if the key is not present.\nRaises if the underlying value is not a `Hash`.","summary":"<p>Assumes the underlying value is a <code><a href=\"../Hash.html\">Hash</a></code> and returns the element with the given key, or <code>nil</code> if the key is not present.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String) : CON::Any?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L103","def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CON::Any | ::Nil","visibility":"Public","body":"case object = @raw\nwhen Hash\n  object[key]?\nelse\n  raise(\"Expected Hash for #[]?(key : String), not #{object.class}\")\nend"}},{"id":"as_a:Array(Any)-instance-method","html_id":"as_a:Array(Any)-instance-method","name":"as_a","doc":"Checks that the underlying value is `Array`, and returns its value.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Array.html\">Array</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Array(Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L218","def":{"name":"as_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Any)","visibility":"Public","body":"@raw.as(Array)"}},{"id":"as_a?:Array(Any)?-instance-method","html_id":"as_a?:Array(Any)?-instance-method","name":"as_a?","doc":"Checks that the underlying value is `Array`, and returns its value.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Array.html\">Array</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Array(Any)?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L224","def":{"name":"as_a?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Any) | ::Nil","visibility":"Public","body":"if @raw.is_a?(Array)\n  as_a\nend"}},{"id":"as_bool:Bool-instance-method","html_id":"as_bool:Bool-instance-method","name":"as_bool","doc":"Checks that the underlying value is `Bool`, and returns its value.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Bool.html\">Bool</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L146","def":{"name":"as_bool","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@raw.as(Bool)"}},{"id":"as_bool?:Bool?-instance-method","html_id":"as_bool?:Bool?-instance-method","name":"as_bool?","doc":"Checks that the underlying value is `Bool`, and returns its value.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Bool.html\">Bool</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L152","def":{"name":"as_bool?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"if @raw.is_a?(Bool)\n  as_bool\nend"}},{"id":"as_f:Float64-instance-method","html_id":"as_f:Float64-instance-method","name":"as_f","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float64`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Float.html\">Float</a></code>, and returns its value as an <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L182","def":{"name":"as_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@raw.as(Float64)"}},{"id":"as_f32:Float32-instance-method","html_id":"as_f32:Float32-instance-method","name":"as_f32","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float32`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Float.html\">Float</a></code>, and returns its value as an <code>Float32</code>.</p>","abstract":false,"args":[],"args_string":" : Float32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L194","def":{"name":"as_f32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32","visibility":"Public","body":"(@raw.as(Float)).to_f32"}},{"id":"as_f32?:Float32?-instance-method","html_id":"as_f32?:Float32?-instance-method","name":"as_f32?","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float32`.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Float.html\">Float</a></code>, and returns its value as an <code>Float32</code>.</p>","abstract":false,"args":[],"args_string":" : Float32?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L200","def":{"name":"as_f32?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32 | ::Nil","visibility":"Public","body":"if @raw.is_a?(Float)\n  as_f32\nend"}},{"id":"as_f?:Float64?-instance-method","html_id":"as_f?:Float64?-instance-method","name":"as_f?","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float64`.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Float.html\">Float</a></code>, and returns its value as an <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L188","def":{"name":"as_f?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"@raw.as?(Float64)"}},{"id":"as_h:Hash(String,Any)-instance-method","html_id":"as_h:Hash(String,Any)-instance-method","name":"as_h","doc":"Checks that the underlying value is `Hash`, and returns its value.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Hash.html\">Hash</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L230","def":{"name":"as_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Any)","visibility":"Public","body":"@raw.as(Hash)"}},{"id":"as_h?:Hash(String,Any)?-instance-method","html_id":"as_h?:Hash(String,Any)?-instance-method","name":"as_h?","doc":"Checks that the underlying value is `Hash`, and returns its value.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Hash.html\">Hash</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Any)?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L236","def":{"name":"as_h?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Any) | ::Nil","visibility":"Public","body":"if @raw.is_a?(Hash)\n  as_h\nend"}},{"id":"as_i:Int32-instance-method","html_id":"as_i:Int32-instance-method","name":"as_i","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int32`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Int.html\">Int</a></code>, and returns its value as an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L158","def":{"name":"as_i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(@raw.as(Int)).to_i"}},{"id":"as_i64:Int64-instance-method","html_id":"as_i64:Int64-instance-method","name":"as_i64","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int64`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Int.html\">Int</a></code>, and returns its value as an <code>Int64</code>.</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L170","def":{"name":"as_i64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"(@raw.as(Int)).to_i64"}},{"id":"as_i64?:Int64?-instance-method","html_id":"as_i64?:Int64?-instance-method","name":"as_i64?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int64`.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Int.html\">Int</a></code>, and returns its value as an <code>Int64</code>.</p>","abstract":false,"args":[],"args_string":" : Int64?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L176","def":{"name":"as_i64?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64 | ::Nil","visibility":"Public","body":"if @raw.is_a?(Int64)\n  as_i64\nend"}},{"id":"as_i?:Int32?-instance-method","html_id":"as_i?:Int32?-instance-method","name":"as_i?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int32`.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Int.html\">Int</a></code>, and returns its value as an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L164","def":{"name":"as_i?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"if @raw.is_a?(Int)\n  as_i\nend"}},{"id":"as_nil:Nil-instance-method","html_id":"as_nil:Nil-instance-method","name":"as_nil","doc":"Checks that the underlying value is `Nil`, and returns `nil`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../Nil.html\">Nil</a></code>, and returns <code>nil</code>.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L140","def":{"name":"as_nil","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@raw.as(Nil)"}},{"id":"as_s:String-instance-method","html_id":"as_s:String-instance-method","name":"as_s","doc":"Checks that the underlying value is `String`, and returns its value.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../String.html\">String</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L206","def":{"name":"as_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@raw.as(String)"}},{"id":"as_s?:String?-instance-method","html_id":"as_s?:String?-instance-method","name":"as_s?","doc":"Checks that the underlying value is `String`, and returns its value.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code><a href=\"../String.html\">String</a></code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L212","def":{"name":"as_s?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"if @raw.is_a?(String)\n  as_s\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a new CON::Any instance with the `raw` value `clone`ed.","summary":"<p>Returns a new CON::Any instance with the <code><a href=\"../CON/Any.html#raw:Type-instance-method\">#raw</a></code> value <code><a href=\"../CON/Any.html#clone-instance-method\">#clone</a></code>ed.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L279","def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Any.new(raw.clone)"}},{"id":"dig(key:String|Int,*subkeys)-instance-method","html_id":"dig(key:String|Int,*subkeys)-instance-method","name":"dig","doc":"Traverses the depth of a structure and returns the value, otherwise raises.","summary":"<p>Traverses the depth of a structure and returns the value, otherwise raises.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Int"},{"name":"subkeys","doc":null,"default_value":"","external_name":"subkeys","restriction":""}],"args_string":"(key : String | Int, *subkeys)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L126","def":{"name":"dig","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Int"},{"name":"subkeys","doc":null,"default_value":"","external_name":"subkeys","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = self[key]) && (value.responds_to?(:dig))\n  return value.dig(*subkeys)\nend\nraise(\"CON::Any value not diggable for key: #{key.inspect}\")\n"}},{"id":"dig?(key:String|Int,*subkeys)-instance-method","html_id":"dig?(key:String|Int,*subkeys)-instance-method","name":"dig?","doc":"Traverses the depth of a structure and returns the value.\nReturns `nil` if not found.","summary":"<p>Traverses the depth of a structure and returns the value.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Int"},{"name":"subkeys","doc":null,"default_value":"","external_name":"subkeys","restriction":""}],"args_string":"(key : String | Int, *subkeys)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L114","def":{"name":"dig?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Int"},{"name":"subkeys","doc":null,"default_value":"","external_name":"subkeys","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = self[key]?) && (value.responds_to?(:\"dig?\"))\n  value.dig?(*subkeys)\nend"}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":"Returns a new CON::Any instance with the `raw` value `dup`ed.","summary":"<p>Returns a new CON::Any instance with the <code><a href=\"../CON/Any.html#raw:Type-instance-method\">#raw</a></code> value <code><a href=\"../CON/Any.html#dup-instance-method\">#dup</a></code>ed.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L274","def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Any.new(raw.dup)"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L266","def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = raw.hash(hasher)\nhasher\n"}},{"id":"raw:Type-instance-method","html_id":"raw:Type-instance-method","name":"raw","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L8","def":{"name":"raw","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@raw"}},{"id":"size:Int-instance-method","html_id":"size:Int-instance-method","name":"size","doc":"Assumes the underlying value is an `Array` or `Hash` and returns its size.\nRaises if the underlying value is not an `Array` or `Hash`.","summary":"<p>Assumes the underlying value is an <code><a href=\"../Array.html\">Array</a></code> or <code><a href=\"../Hash.html\">Hash</a></code> and returns its size.</p>","abstract":false,"args":[],"args_string":" : Int","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L53","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"case object = @raw\nwhen Array\n  object.size\nwhen Hash\n  object.size\nelse\n  raise(\"Expected Array or Hash for #size, not #{object.class}\")\nend"}},{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L293","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@raw.to_con(con)"}},{"id":"to_json(json:JSON::Builder)-instance-method","html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(json : JSON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L297","def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@raw.to_json(json)"}}],"macros":[],"types":[{"html_id":"github.com/j8r/con/CON/Any/Type","path":"CON/Any/Type.html","kind":"alias","full_name":"CON::Any::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"any.cr","line_number":5,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":true,"aliased":"(Array(CON::Any) | Bool | Float64 | Hash(String, CON::Any) | Int64 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON/Any","kind":"struct","full_name":"CON::Any","name":"Any"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/j8r/con/CON/Builder","path":"CON/Builder.html","kind":"struct","full_name":"CON::Builder","name":"Builder","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"builder.cr","line_number":6,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":"The builder advantage efficiency over safety. It is relativaly unsafe\nto use it as-is, using it through `Object#to_con` is often a better option.","summary":"<p>The builder advantage efficiency over safety.</p>","class_methods":[],"constructors":[{"id":"new(io:IO,indent:String?=nil)-class-method","html_id":"new(io:IO,indent:String?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"indent","doc":null,"default_value":"nil","external_name":"indent","restriction":"String | ::Nil"}],"args_string":"(io : IO, indent : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L19","def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"indent","doc":null,"default_value":"nil","external_name":"indent","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, indent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"array(key:String,&block)-instance-method","html_id":"array(key:String,&amp;block)-instance-method","name":"array","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String, &block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L147","def":{"name":"array","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"key(key)\narray do\n  yield\nend\n"}},{"id":"array(&block)-instance-method","html_id":"array(&amp;block)-instance-method","name":"array","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L152","def":{"name":"array","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"array_nest = @nest\n@io << '['\nincrement_nest\nif @indent\n  @io << '\\n'\n  add_indent\nend\n@begin_array = true\nif @begin_hash && (!@root_document)\n  raise(Error.new(\"Can't use array inside a hash\"))\nend\n@begin_hash = false\nprevious_root_document = @root_document\n@root_document = false\nyield\n@root_document = previous_root_document\n@begin_array = false\nif @indent\n  @io << '\\n'\n  array_nest.times do\n    @io << @indent\n  end\nend\n@io << ']'\n"}},{"id":"bool(bool:Bool)-instance-method","html_id":"bool(bool:Bool)-instance-method","name":"bool","doc":null,"summary":null,"abstract":false,"args":[{"name":"bool","doc":null,"default_value":"","external_name":"bool","restriction":"Bool"}],"args_string":"(bool : Bool)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L124","def":{"name":"bool","args":[{"name":"bool","doc":null,"default_value":"","external_name":"bool","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io << bool"}},{"id":"field(key,value)-instance-method","html_id":"field(key,value)-instance-method","name":"field","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(key, value)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L28","def":{"name":"field","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @begin_array\n  raise(Error.new(\"Can't use field inside an array\"))\nelse\n  if @indent\n    add_indent\n  else\n    if @begin_hash\n      @begin_hash = false\n    else\n      @io << ' '\n    end\n  end\nend\ncon_key(key.to_s)\n@io << ' '\nvalue.to_con(Builder.new(@io, @indent, @nest))\nif @indent\n  @io << '\\n'\nend\n"}},{"id":"float(float:Float)-instance-method","html_id":"float(float:Float)-instance-method","name":"float","doc":null,"summary":null,"abstract":false,"args":[{"name":"float","doc":null,"default_value":"","external_name":"float","restriction":"Float"}],"args_string":"(float : Float)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L128","def":{"name":"float","args":[{"name":"float","doc":null,"default_value":"","external_name":"float","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case float\nwhen .nan?\n  raise(CON::Builder::Error.new(\"NaN not allowed in CON\"))\nwhen .infinite?\n  raise(CON::Builder::Error.new(\"Infinity not allowed in CON\"))\nelse\n  @io << float\nend"}},{"id":"hash(key:String,&block)-instance-method","html_id":"hash(key:String,&amp;block)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String, &block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L177","def":{"name":"hash","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"key(key)\n@root_document = false\nhash do\n  yield\nend\n"}},{"id":"hash(new_line:Bool=true,&block)-instance-method","html_id":"hash(new_line:Bool=true,&amp;block)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_line","doc":null,"default_value":"true","external_name":"new_line","restriction":"Bool"}],"args_string":"(new_line : Bool = <span class=\"n\">true</span>, &block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L183","def":{"name":"hash","args":[{"name":"new_line","doc":null,"default_value":"true","external_name":"new_line","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"previous_root_document = @root_document\n@begin_hash = true\nif @root_document\n  @root_document = false\n  yield\nelse\n  hash_nest = @nest\n  increment_nest\n  @io << '{'\n  if @indent\n    @io << '\\n'\n  end\n  yield\n  if @indent\n    hash_nest.times do\n      @io << @indent\n    end\n  end\n  @io << '}'\n  if @indent && new_line\n    @io << '\\n'\n  end\nend\n@begin_hash = false\n@root_document = previous_root_document\n"}},{"id":"integer(integer:Int)-instance-method","html_id":"integer(integer:Int)-instance-method","name":"integer","doc":null,"summary":null,"abstract":false,"args":[{"name":"integer","doc":null,"default_value":"","external_name":"integer","restriction":"Int"}],"args_string":"(integer : Int)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L139","def":{"name":"integer","args":[{"name":"integer","doc":null,"default_value":"","external_name":"integer","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io << integer"}},{"id":"max_nesting:Int32-instance-method","html_id":"max_nesting:Int32-instance-method","name":"max_nesting","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L12","def":{"name":"max_nesting","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_nesting"}},{"id":"max_nesting=(max_nesting:Int32)-instance-method","html_id":"max_nesting=(max_nesting:Int32)-instance-method","name":"max_nesting=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_nesting","doc":null,"default_value":"","external_name":"max_nesting","restriction":"Int32"}],"args_string":"(max_nesting : Int32)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L16","def":{"name":"max_nesting=","args":[{"name":"max_nesting","doc":null,"default_value":"","external_name":"max_nesting","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_nesting = max_nesting"}},{"id":"newline:Bool-instance-method","html_id":"newline:Bool-instance-method","name":"newline","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L13","def":{"name":"newline","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@newline"}},{"id":"nil-instance-method","html_id":"nil-instance-method","name":"nil","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L143","def":{"name":"nil","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io << \"nil\""}},{"id":"string(string:String)-instance-method","html_id":"string(string:String)-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L68","def":{"name":"string","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io << '\"'\nstart_pos = 0\nreader = Char::Reader.new(string)\nwhile reader.has_next?\n  case char = reader.current_char\n  when '\\\\'\n    escape = \"\\\\\\\\\"\n  when '\"'\n    escape = \"\\\\\\\"\"\n  when '\\b'\n    escape = \"\\\\b\"\n  when '\\f'\n    escape = \"\\\\f\"\n  when '\\n'\n    escape = \"\\\\n\"\n  when '\\r'\n    escape = \"\\\\r\"\n  when '\\t'\n    escape = \"\\\\t\"\n  else\n    reader.next_char\n    next\n  end\n  @io.write(string.to_slice[start_pos, reader.pos - start_pos])\n  @io << escape\n  reader.next_char\n  start_pos = reader.pos\nend\n@io.write(string.to_slice[start_pos, reader.pos - start_pos])\n@io << '\"'\n"}},{"id":"value(value)-instance-method","html_id":"value(value)-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr#L44","def":{"name":"value","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @begin_hash && (!@root_document)\n  raise(Error.new(\"Can't use value inside a hash\"))\nelse\n  if @begin_array\n    @begin_array = false\n  else\n    if @indent\n      @io << '\\n'\n      add_indent\n    else\n      if !@root_document\n        @io << ' '\n      end\n    end\n  end\nend\nvalue.to_con(Builder.new(@io, @indent, @nest))\n"}}],"macros":[],"types":[{"html_id":"github.com/j8r/con/CON/Builder/Error","path":"CON/Builder/Error.html","kind":"class","full_name":"CON::Builder::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/j8r/con/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"builder.cr","line_number":7,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/builder.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON/Builder","kind":"struct","full_name":"CON::Builder","name":"Builder"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/j8r/con/CON/Error","path":"CON/Error.html","kind":"class","full_name":"CON::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/j8r/con/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lexer.cr","line_number":11,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/j8r/con/CON/ParseException","kind":"class","full_name":"CON::ParseException","name":"ParseException"}],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":"Generic CON error.","summary":"<p>Generic CON error.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON/Lexer","path":"CON/Lexer.html","kind":"module","full_name":"CON::Lexer","name":"Lexer","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lexer.cr","line_number":33,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/j8r/con/CON/Lexer/FromIO","path":"CON/Lexer/FromIO.html","kind":"struct","full_name":"CON::Lexer::FromIO","name":"FromIO","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/CON/Lexer/Main","kind":"module","full_name":"CON::Lexer::Main","name":"Main"},{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lexer_from.cr","line_number":1,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/CON/Lexer/Main","kind":"module","full_name":"CON::Lexer::Main","name":"Main"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON/Lexer","kind":"module","full_name":"CON::Lexer","name":"Lexer"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(io:IO)-class-method","html_id":"new(io:IO)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L4","def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"consume_key-instance-method","html_id":"consume_key-instance-method","name":"consume_key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L16","def":{"name":"consume_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"consume_key_with_buffer"}},{"id":"consume_string-instance-method","html_id":"consume_string-instance-method","name":"consume_string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L12","def":{"name":"consume_string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"consume_string_with_buffer"}},{"id":"next_char:Char-instance-method","html_id":"next_char:Char-instance-method","name":"next_char","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L8","def":{"name":"next_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"@current_char = @io.read_char || '\\u{0}'"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON/Lexer/FromString","path":"CON/Lexer/FromString.html","kind":"struct","full_name":"CON::Lexer::FromString","name":"FromString","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/CON/Lexer/Main","kind":"module","full_name":"CON::Lexer::Main","name":"Main"},{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lexer_from.cr","line_number":21,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/CON/Lexer/Main","kind":"module","full_name":"CON::Lexer::Main","name":"Main"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON/Lexer","kind":"module","full_name":"CON::Lexer","name":"Lexer"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(string:String)-class-method","html_id":"new(string:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L24","def":{"name":"new","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next_char:Char-instance-method","html_id":"next_char:Char-instance-method","name":"next_char","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L29","def":{"name":"next_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"@column_number = @column_number + 1\n@current_char = @reader.next_char\n"}},{"id":"slice_range(start_pos,end_pos)-instance-method","html_id":"slice_range(start_pos,end_pos)-instance-method","name":"slice_range","doc":null,"summary":null,"abstract":false,"args":[{"name":"start_pos","doc":null,"default_value":"","external_name":"start_pos","restriction":""},{"name":"end_pos","doc":null,"default_value":"","external_name":"end_pos","restriction":""}],"args_string":"(start_pos, end_pos)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L74","def":{"name":"slice_range","args":[{"name":"start_pos","doc":null,"default_value":"","external_name":"start_pos","restriction":""},{"name":"end_pos","doc":null,"default_value":"","external_name":"end_pos","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@reader.string.to_slice[start_pos, end_pos - start_pos]"}},{"id":"string_range(start_pos,end_pos)-instance-method","html_id":"string_range(start_pos,end_pos)-instance-method","name":"string_range","doc":null,"summary":null,"abstract":false,"args":[{"name":"start_pos","doc":null,"default_value":"","external_name":"start_pos","restriction":""},{"name":"end_pos","doc":null,"default_value":"","external_name":"end_pos","restriction":""}],"args_string":"(start_pos, end_pos)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer_from.cr#L70","def":{"name":"string_range","args":[{"name":"start_pos","doc":null,"default_value":"","external_name":"start_pos","restriction":""},{"name":"end_pos","doc":null,"default_value":"","external_name":"end_pos","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@reader.string.byte_slice(start_pos, end_pos - start_pos)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON/Lexer/Main","path":"CON/Lexer/Main.html","kind":"module","full_name":"CON::Lexer::Main","name":"Main","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lexer.cr","line_number":33,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/j8r/con/CON/Lexer/FromIO","kind":"struct","full_name":"CON::Lexer::FromIO","name":"FromIO"},{"html_id":"github.com/j8r/con/CON/Lexer/FromString","kind":"struct","full_name":"CON::Lexer::FromString","name":"FromString"}],"namespace":{"html_id":"github.com/j8r/con/CON/Lexer","kind":"module","full_name":"CON::Lexer","name":"Lexer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"column_number-instance-method","html_id":"column_number-instance-method","name":"column_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L39","def":{"name":"column_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@column_number"}},{"id":"current_char:Char-instance-method","html_id":"current_char:Char-instance-method","name":"current_char","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L40","def":{"name":"current_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"@current_char"}},{"id":"line_number-instance-method","html_id":"line_number-instance-method","name":"line_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L38","def":{"name":"line_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_number"}},{"id":"next_key:String|Nil|CON::Token-instance-method","html_id":"next_key:String|Nil|CON::Token-instance-method","name":"next_key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | Nil | CON::Token","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L65","def":{"name":"next_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Nil | CON::Token","visibility":"Public","body":"skip_whitespaces_and_comments\n@buffer.try(&.clear)\ncase @current_char\nwhen '{'\n  next_char\n  return Token::BeginHash\nwhen '}'\n  next_char\n  return Token::EndHash\nwhen '['\n  next_char\n  return Token::BeginArray\nwhen ']'\n  next_char\n  return Token::EndArray\nwhen '\\u{0}'\n  return Token::EOF\nend\nconsume_key\n"}},{"id":"next_value:Type|CON::Token-instance-method","html_id":"next_value:Type|CON::Token-instance-method","name":"next_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type | CON::Token","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L44","def":{"name":"next_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type | CON::Token","visibility":"Public","body":"skip_whitespaces_and_comments\n@buffer.try(&.clear)\nvalue = case @current_char\nwhen '\"'\n  next_char\n  consume_string\nwhen '['\n  next_char\n  Token::BeginArray\nwhen ']'\n  next_char\n  Token::EndArray\nwhen '{'\n  next_char\n  Token::BeginHash\nwhen '}'\n  next_char\n  Token::EndHash\nwhen 't'\n  consume_true\nwhen 'f'\n  consume_false\nwhen 'n'\n  consume_nil\nwhen '-'\n  consume_int(negative: true)\nwhen '0'..'9'\n  consume_int\nwhen '\\u{0}'\n  Token::EOF\nelse\n  raise(\"Unknown char: '#{@current_char}'\")\nend\n@column_number = 1\nvalue\n"}},{"id":"nobuffer=(nobuffer:Bool)-instance-method","html_id":"nobuffer=(nobuffer:Bool)-instance-method","name":"nobuffer=","doc":null,"summary":null,"abstract":false,"args":[{"name":"nobuffer","doc":null,"default_value":"","external_name":"nobuffer","restriction":"Bool"}],"args_string":"(nobuffer : Bool)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L40","def":{"name":"nobuffer=","args":[{"name":"nobuffer","doc":null,"default_value":"","external_name":"nobuffer","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@buffer = nobuffer ? nil : IO::Memory.new"}}],"macros":[],"types":[]}]},{"html_id":"github.com/j8r/con/CON/ParseException","path":"CON/ParseException.html","kind":"class","full_name":"CON::ParseException","name":"ParseException","abstract":false,"superclass":{"html_id":"github.com/j8r/con/CON/Error","kind":"class","full_name":"CON::Error","name":"Error"},"ancestors":[{"html_id":"github.com/j8r/con/CON/Error","kind":"class","full_name":"CON::Error","name":"Error"},{"html_id":"github.com/j8r/con/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lexer.cr","line_number":15,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":"Exception thrown on a CON parse error.","summary":"<p>Exception thrown on a CON parse error.</p>","class_methods":[],"constructors":[{"id":"new(message,line_number,column_number,cause=nil)-class-method","html_id":"new(message,line_number,column_number,cause=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""},{"name":"line_number","doc":null,"default_value":"","external_name":"line_number","restriction":""},{"name":"column_number","doc":null,"default_value":"","external_name":"column_number","restriction":""},{"name":"cause","doc":null,"default_value":"nil","external_name":"cause","restriction":""}],"args_string":"(message, line_number, column_number, cause = <span class=\"n\">nil</span>)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L19","def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""},{"name":"line_number","doc":null,"default_value":"","external_name":"line_number","restriction":""},{"name":"column_number","doc":null,"default_value":"","external_name":"column_number","restriction":""},{"name":"cause","doc":null,"default_value":"nil","external_name":"cause","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message, line_number, column_number, cause)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"column_number:Int32-instance-method","html_id":"column_number:Int32-instance-method","name":"column_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L19","def":{"name":"column_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@column_number"}},{"id":"line_number:Int32-instance-method","html_id":"line_number:Int32-instance-method","name":"line_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L18","def":{"name":"line_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@line_number"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON/PullParser","path":"CON/PullParser.html","kind":"class","full_name":"CON::PullParser","name":"PullParser","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"pull_parser.cr","line_number":3,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(string:String)-class-method","html_id":"new(string:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L47","def":{"name":"new","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(io:IO)-class-method","html_id":"new(io:IO)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L51","def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"column_number:Int32-instance-method","html_id":"column_number:Int32-instance-method","name":"column_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L43","def":{"name":"column_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@lexer.column_number"}},{"id":"expect(value,kind)-instance-method","html_id":"expect(value,kind)-instance-method","name":"expect","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":""}],"args_string":"(value, kind)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L134","def":{"name":"expect","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case value\nwhen kind\n  value\nelse\n  type_error(value, kind)\nend"}},{"id":"expect(value,kind:T.class)forallT-instance-method","html_id":"expect(value,kind:T.class)forallT-instance-method","name":"expect","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"T.class"}],"args_string":"(value, kind : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L129","def":{"name":"expect","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !value.is_a?(T)\n  type_error(value, kind)\nend\nvalue\n"}},{"id":"line_number:Int32-instance-method","html_id":"line_number:Int32-instance-method","name":"line_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L39","def":{"name":"line_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@lexer.line_number"}},{"id":"max_nesting:Int32-instance-method","html_id":"max_nesting:Int32-instance-method","name":"max_nesting","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L6","def":{"name":"max_nesting","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_nesting"}},{"id":"max_nesting=(max_nesting:Int32)-instance-method","html_id":"max_nesting=(max_nesting:Int32)-instance-method","name":"max_nesting=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_nesting","doc":null,"default_value":"","external_name":"max_nesting","restriction":"Int32"}],"args_string":"(max_nesting : Int32)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L10","def":{"name":"max_nesting=","args":[{"name":"max_nesting","doc":null,"default_value":"","external_name":"max_nesting","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_nesting = max_nesting"}},{"id":"read_array(&block)-instance-method","html_id":"read_array(&amp;block)-instance-method","name":"read_array","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L83","def":{"name":"read_array","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"increment_nest\nexpect(@lexer.next_value, Token::BeginArray)\nyield\nexpect(@lexer.next_value, Token::EndArray)\n@nest = @nest - 1\n"}},{"id":"read_array_unchecked(&block)-instance-method","html_id":"read_array_unchecked(&amp;block)-instance-method","name":"read_array_unchecked","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L71","def":{"name":"read_array_unchecked","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"increment_nest\nwhile true\n  case value = @lexer.next_value\n  when Token::EndArray\n    break\n  when Token::EOF, Token::EndHash\n    unexpected_token(value)\n  else\n    yield value\n  end\nend\n@nest = @nest - 1\n"}},{"id":"read_document(&block)-instance-method","html_id":"read_document(&amp;block)-instance-method","name":"read_document","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L110","def":{"name":"read_document","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"case key = @lexer.next_key\nwhen Token::BeginHash\n  read_hash_unchecked do |key|\n    yield key\n  end\nwhen String\n  increment_nest\n  yield key\n  while true\n    case key = @lexer.next_key\n    when String\n      yield key\n    when Token::EOF\n      return\n    else\n      expect(key, String)\n    end\n  end\n  @nest = @nest - 1\nwhen Token::EOF\n  return\nelse\n  expect(key, Union(Token::BeginHash | String | Token::EOF))\nend"}},{"id":"read_hash(&block)-instance-method","html_id":"read_hash(&amp;block)-instance-method","name":"read_hash","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L103","def":{"name":"read_hash","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"expect(@lexer.next_key, Token::BeginHash)\nread_hash_unchecked do |key|\n  yield key\nend\n"}},{"id":"read_hash_unchecked(&block)-instance-method","html_id":"read_hash_unchecked(&amp;block)-instance-method","name":"read_hash_unchecked","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L91","def":{"name":"read_hash_unchecked","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"increment_nest\nwhile true\n  case key = @lexer.next_key\n  when String\n    yield key\n  when Token::EndHash\n    break\n  else\n    expect(key, String)\n  end\nend\n@nest = @nest - 1\n"}},{"id":"read_key:String-instance-method","html_id":"read_key:String-instance-method","name":"read_key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L55","def":{"name":"read_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"expect(@lexer.next_key, String)"}},{"id":"read_key_unchecked:String|Token|Nil-instance-method","html_id":"read_key_unchecked:String|Token|Nil-instance-method","name":"read_key_unchecked","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | Token | Nil","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L59","def":{"name":"read_key_unchecked","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Token | Nil","visibility":"Public","body":"@lexer.next_key"}},{"id":"read_value:Type-instance-method","html_id":"read_value:Type-instance-method","name":"read_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L63","def":{"name":"read_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"expect(@lexer.next_value, Type)"}},{"id":"read_value_unchecked:Type|Token-instance-method","html_id":"read_value_unchecked:Type|Token-instance-method","name":"read_value_unchecked","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Type | Token","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L67","def":{"name":"read_value_unchecked","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type | Token","visibility":"Public","body":"@lexer.next_value"}},{"id":"skip_value-instance-method","html_id":"skip_value-instance-method","name":"skip_value","doc":"Skips all subdata of a key","summary":"<p>Skips all subdata of a key</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L9","def":{"name":"skip_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lexer.nobuffer = true\ncase value = read_value_unchecked\nwhen Token::BeginHash\n  skip_hash\nwhen Token::BeginArray\n  skip_array\nwhen Type\nelse\n  expect(value, Union(Type | Token::BeginHash | Token::BeginArray))\nend\n@lexer.nobuffer = false\nvalue\n"}},{"id":"type_error(value,kind)-instance-method","html_id":"type_error(value,kind)-instance-method","name":"type_error","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":""}],"args_string":"(value, kind)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/pull_parser.cr#L141","def":{"name":"type_error","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"parse_exception(\"Expected #{kind}, got #{value.class} (#{value.inspect})\")"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON/Token","path":"CON/Token.html","kind":"enum","full_name":"CON::Token","name":"Token","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/j8r/con/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lexer.cr","line_number":24,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"BeginArray","name":"BeginArray","value":"0","doc":null,"summary":null},{"id":"EndArray","name":"EndArray","value":"1","doc":null,"summary":null},{"id":"BeginHash","name":"BeginHash","value":"2","doc":null,"summary":null},{"id":"EndHash","name":"EndHash","value":"3","doc":null,"summary":null},{"id":"EOF","name":"EOF","value":"4","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"begin_array?-instance-method","html_id":"begin_array?-instance-method","name":"begin_array?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L25","def":{"name":"begin_array?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == BeginArray"}},{"id":"begin_hash?-instance-method","html_id":"begin_hash?-instance-method","name":"begin_hash?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L27","def":{"name":"begin_hash?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == BeginHash"}},{"id":"end_array?-instance-method","html_id":"end_array?-instance-method","name":"end_array?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L26","def":{"name":"end_array?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EndArray"}},{"id":"end_hash?-instance-method","html_id":"end_hash?-instance-method","name":"end_hash?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L28","def":{"name":"end_hash?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EndHash"}},{"id":"eof?-instance-method","html_id":"eof?-instance-method","name":"eof?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr#L29","def":{"name":"eof?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EOF"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/CON/Type","path":"CON/Type.html","kind":"alias","full_name":"CON::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lexer.cr","line_number":4,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/lexer.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float64 | Int64 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/CON","kind":"module","full_name":"CON","name":"CON"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/j8r/con/Enum","path":"Enum.html","kind":"struct","full_name":"Enum","name":"Enum","abstract":true,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":136,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":187,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Enum is the base type of all enums.\n\nAn enum is a set of integer values, where each value has an associated name. For example:\n\n```\nenum Color\n  Red   # 0\n  Green # 1\n  Blue  # 2\nend\n```\n\nValues start with the value `0` and are incremented by one, but can be overwritten.\n\nTo get the underlying value you invoke value on it:\n\n```\nColor::Green.value # => 1\n```\n\nEach constant (member) in the enum has the type of the enum:\n\n```\ntypeof(Color::Red) # => Color\n```\n\n### Flags enum\n\nAn enum can be marked with the `@[Flags]` attribute. This changes the default values:\n\n```\n@[Flags]\nenum IOMode\n  Read  # 1\n  Write # 2\n  Async # 4\nend\n```\n\nAdditionally, some methods change their behaviour.\n\n### Enums from integers\n\nAn enum can be created from an integer:\n\n```\nColor.new(1).to_s # => \"Green\"\n```\n\nValues that don't correspond to an enum's constants are allowed: the value\nwill still be of type Color, but when printed you will get the underlying value:\n\n```\nColor.new(10).to_s # => \"10\"\n```\n\nThis method is mainly intended to convert integers from C to enums in Crystal.\n\n### Question methods\n\nAn enum automatically defines question methods for each member, using\n`String#underscore` for the method name.\n* In the case of regular enums, this compares by equality (`==`).\n* In the case of flags enums, this invokes `includes?`.\n\nFor example:\n\n```\ncolor = Color::Blue\ncolor.red?  # => false\ncolor.blue? # => true\n\nmode = IOMode::Read | IOMode::Async\nmode.read?  # => true\nmode.write? # => false\nmode.async? # => true\n```\n\nThis is very convenient in `case` expressions:\n\n```\ncase color\nwhen .red?\n  puts \"Got red\"\nwhen .blue?\n  puts \"Got blue\"\nend\n```","summary":"<p>Enum is the base type of all enums.</p>","class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L192","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case value\nwhen String\n  parse(value)\nwhen Int64\n  from_value(value)\nelse\n  pull.expect(value, String | Int64)\nend"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L188","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.from_con(pull.read_value, pull)"}}],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L137","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_con(con)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Float","path":"Float.html","kind":"struct","full_name":"Float","name":"Float","abstract":true,"superclass":{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":31,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/j8r/con/BigFloat","kind":"struct","full_name":"BigFloat","name":"BigFloat"}],"including_types":[],"namespace":null,"doc":"Float is the base type of all floating point numbers.\n\nThere are two floating point types, `Float32` and `Float64`,\nwhich correspond to the [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format)\nand [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format)\ntypes defined by IEEE.\n\nA floating point literal is an optional `+` or `-` sign, followed by\na sequence of numbers or underscores, followed by a dot,\nfollowed by numbers or underscores, followed by an optional exponent suffix,\nfollowed by an optional type suffix. If no suffix is present, the literal's type is `Float64`.\n\n```\n1.0     # Float64\n1.0_f32 # Float32\n1_f32   # Float32\n\n1e10   # Float64\n1.5e10 # Float64\n1.5e-7 # Float64\n\n+1.3 # Float64\n-0.5 # Float64\n```\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000.111_111 # better than 1000000.111111\n```","summary":"<p>Float is the base type of all floating point numbers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L32","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.float(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Hash","path":"Hash.html","kind":"class","full_name":"Hash(K, V)","name":"Hash","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/j8r/con/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/j8r/con/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":81,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"any.cr","line_number":326,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"},{"filename":"from_con.cr","line_number":38,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/j8r/con/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Hash` represents a collection of key-value mappings, similar to a dictionary.\n\nMain operations are storing a key-value mapping (`#[]=`) and\nquerying the value associated to a key (`#[]`). Key-value mappings can also be\ndeleted (`#delete`).\nKeys are unique within a hash. When adding a key-value mapping with a key that\nis already in use, the old value will be forgotten.\n\n```\n# Create a new Hash for mapping String to Int32\nhash = Hash(String, Int32).new\nhash[\"one\"] = 1\nhash[\"two\"] = 2\nhash[\"one\"] # => 1\n```\n\n[Hash literals](http://crystal-lang.org/reference/syntax_and_semantics/literals/hash.html)\ncan also be used to create a `Hash`:\n\n```\n{\"one\" => 1, \"two\" => 2}\n```\n\nImplementation is based on an open hash table.\nTwo objects refer to the same hash key when their hash value (`Object#hash`)\nis identical and both objects are equal to each other (`Object#==`).\n\nEnumeration follows the order that the corresponding keys were inserted.\n\nNOTE: When using mutable data types as keys, changing the value of a key after\nit was inserted into the `Hash` may lead to undefined behaviour. This can be\nrestored by re-indexing the hash with `#rehash`.","summary":"<p>A <code><a href=\"Hash.html\">Hash</a></code> represents a collection of key-value mappings, similar to a dictionary.</p>","class_methods":[{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L39","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hash = Hash(K, V).new\npull.read_document do |key|\n  hash[key] = V.from_con(pull)\nend\nhash\n"}}],"constructors":[],"instance_methods":[{"id":"==(other:CON::Any)-instance-method","html_id":"==(other:CON::Any)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L327","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == other.raw"}},{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L82","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.hash(new_line: false) do\n  each do |key, value|\n    con.field(key, value)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Int","path":"Int.html","kind":"struct","full_name":"Int","name":"Int","abstract":true,"superclass":{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":25,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/j8r/con/BigInt","kind":"struct","full_name":"BigInt","name":"BigInt"}],"including_types":[],"namespace":null,"doc":"Int is the base type of all integer types.\n\nThere are four signed integer types: `Int8`, `Int16`, `Int32` and `Int64`,\nbeing able to represent numbers of 8, 16, 32 and 64 bits respectively.\nThere are four unsigned integer types: `UInt8`, `UInt16`, `UInt32` and `UInt64`.\n\nAn integer literal is an optional `+` or `-` sign, followed by\na sequence of digits and underscores, optionally followed by a suffix.\nIf no suffix is present, the literal's type is the lowest between `Int32`, `Int64` and `UInt64`\nin which the number fits:\n\n```\n1 # Int32\n\n1_i8  # Int8\n1_i16 # Int16\n1_i32 # Int32\n1_i64 # Int64\n\n1_u8  # UInt8\n1_u16 # UInt16\n1_u32 # UInt32\n1_u64 # UInt64\n\n+10 # Int32\n-20 # Int32\n\n2147483648          # Int64\n9223372036854775808 # UInt64\n```\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000 # better than 1000000\n```\n\nBinary numbers start with `0b`:\n\n```\n0b1101 # == 13\n```\n\nOctal numbers start with `0o`:\n\n```\n0o123 # == 83\n```\n\nHexadecimal numbers start with `0x`:\n\n```\n0xFE012D # == 16646445\n0xfe012d # == 16646445\n```","summary":"<p>Int is the base type of all integer types.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L26","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.integer(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/JSON","path":"JSON.html","kind":"module","full_name":"JSON","name":"JSON","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"to_con.cr","line_number":142,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/j8r/con/JSON/Any","path":"JSON/Any.html","kind":"struct","full_name":"JSON::Any","name":"Any","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":142,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/JSON","kind":"module","full_name":"JSON","name":"JSON"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L142","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L143","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@raw.to_con(con)"}}],"macros":[],"types":[]}]},{"html_id":"github.com/j8r/con/NamedTuple","path":"NamedTuple.html","kind":"struct","full_name":"NamedTuple(**T)","name":"NamedTuple","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":101,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":98,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A named tuple is a fixed-size, immutable, stack-allocated mapping\nof a fixed set of keys to values.\n\nYou can think of a `NamedTuple` as an immutable `Hash` whose keys (which\nare of type `Symbol`), and the types for each key, are known at compile time.\n\nA named tuple can be created with a named tuple literal:\n\n```\nlanguage = {name: \"Crystal\", year: 2011} # NamedTuple(name: String, year: Int32)\n\nlanguage[:name]  # => \"Crystal\"\nlanguage[:year]  # => 2011\nlanguage[:other] # compile time error\n```\n\nThe compiler knows what types are in each key, so when indexing a named tuple\nwith a symbol literal the compiler will return the value for that key and\nwith the expected type, like in the above snippet. Indexing with a symbol\nliteral for which there's no key will give a compile-time error.\n\nIndexing with a symbol that is only known at runtime will return\na value whose type is the union of all the types in the named tuple,\nand might raise `KeyError`.","summary":"<p>A named tuple is a fixed-size, immutable, stack-allocated mapping of a fixed set of keys to values.</p>","class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L132","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n    {% for key in T.keys %}\n      %var{key.id} = nil\n    {% end %}\n\n    pull.read_hash_unchecked do |key|\n      case key\n        {% for key, type in T %}\n          when {{ key.stringify }}\n            %var{key.id} = {{ type }}.from_con(pull)\n        {% end %}\n      else\n        pull.skip_value\n      end\n    end\n\n    {% for key in T.keys %}\n      if %var{key.id}.nil?\n        pull.type_error %var{key.id}, CON::Type\n      end\n    {% end %}\n\n    {\n      {% for key in T.keys %}\n        {{ key }}: %var{key.id},\n      {% end %}\n    }\n    {% end %}"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L99","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n    {% for key in T.keys %}\n      %var{key.id} = nil\n      %found{key.id} = false\n    {% end %}\n\n    pull.read_document do |key|\n      case key\n        {% for key, type in T %}\n          when {{ key.stringify }}\n            %var{key.id} = {{ type }}.from_con(pull)\n            %found{key.id} = true\n        {% end %}\n      else\n        pull.skip_value\n      end\n    end\n\n    {% for key, type in T %}\n      if %var{key.id}.nil? && !%found{key.id} && !{{ type.nilable? }}\n        pull.type_error %var{key.id}, CON::Type\n      end\n    {% end %}\n\n    {\n      {% for key, type in T %}\n        {{ key }}: (%var{key.id}.as({{ type }})),\n      {% end %}\n    }\n    {% end %}"}}],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L102","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.hash(new_line: false) do\n  {% for key in T.keys %}\n        con.field({{ key.stringify }}, self[{{ key.symbolize }}])\n      {% end %}\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Nil","path":"Nil.html","kind":"struct","full_name":"Nil","name":"Nil","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":37,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The `Nil` type has only one possible value: `nil`.\n\n`nil` is commonly used to represent the absence of a value.\nFor example, `String#index` returns the position of the character or `nil` if it's not\nin the string:\n\n```\nstr = \"Hello world\"\nstr.index 'e' # => 1\nstr.index 'a' # => nil\n```\n\nIn the above example, trying to invoke a method on the returned value will\ngive a compile time error unless both `Int32` and `Nil` define that method:\n\n```\nstr = \"Hello world\"\nidx = str.index 'e'\nidx + 1 # Error: undefined method '+' for Nil\n```\n\nThe language and the standard library provide short, readable, easy ways to deal with `nil`,\nsuch as `Object#try` and `Object#not_nil!`:\n\n```\nstr = \"Hello world\"\n\n# The index of 'e' in str or 0 if not found\nidx1 = str.index('e') || 0\n\nidx2 = str.index('a')\nif idx2\n  # Compiles: idx2 can't be nil here\n  idx2 + 1\nend\n\n# Tell the compiler that we are sure the returned\n# value is not nil: raises a runtime exception\n# if our assumption doesn't hold.\nidx3 = str.index('o').not_nil!\n```","summary":"<p>The <code><a href=\"Nil.html\">Nil</a></code> type has only one possible value: <code>nil</code>.</p>","class_methods":[],"constructors":[{"id":"from_con(pull:CON::PullParser):Nil-class-method","html_id":"from_con(pull:CON::PullParser):Nil-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : Nil","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L9","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Nil.from_con(pull.read_value, pull)"}}],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L38","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.nil"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Object","path":"Object.html","kind":"class","full_name":"Object","name":"Object","abstract":true,"superclass":null,"ancestors":[],"locations":[{"filename":"to_con.cr","line_number":3,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"any.cr","line_number":302,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"},{"filename":"from_con.cr","line_number":3,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"}],"including_types":[],"namespace":null,"doc":"`Object` is the base type of all Crystal objects.","summary":"<p><code><a href=\"Object.html\">Object</a></code> is the base type of all Crystal objects.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"===(other:CON::Any)-instance-method","html_id":"===(other:CON::Any)-instance-method","name":"===","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L303","def":{"name":"===","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self === other.raw"}},{"id":"from_con(con:String|IO)-instance-method","html_id":"from_con(con:String|IO)-instance-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"String | IO"}],"args_string":"(con : String | IO)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L4","def":{"name":"from_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from_con(CON::PullParser.new(con))"}},{"id":"to_con(io:IO)-instance-method","html_id":"to_con(io:IO)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L10","def":{"name":"to_con","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_con(CON::Builder.new(io))"}},{"id":"to_con-instance-method","html_id":"to_con-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L4","def":{"name":"to_con","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |str|\n  to_con(str)\nend"}},{"id":"to_pretty_con(indent:String=&quot;&quot;)-instance-method","html_id":"to_pretty_con(indent:String=&amp;quot;&amp;quot;)-instance-method","name":"to_pretty_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"indent","doc":null,"default_value":"\"  \"","external_name":"indent","restriction":"String"}],"args_string":"(indent : String = <span class=\"s\">&quot;  &quot;</span>)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L14","def":{"name":"to_pretty_con","args":[{"name":"indent","doc":null,"default_value":"\"  \"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |str|\n  to_pretty_con(str, indent)\nend"}},{"id":"to_pretty_con(io:IO,indent:String=&quot;&quot;)-instance-method","html_id":"to_pretty_con(io:IO,indent:String=&amp;quot;&amp;quot;)-instance-method","name":"to_pretty_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"indent","doc":null,"default_value":"\"  \"","external_name":"indent","restriction":"String"}],"args_string":"(io : IO, indent : String = <span class=\"s\">&quot;  &quot;</span>)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L20","def":{"name":"to_pretty_con","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"indent","doc":null,"default_value":"\"  \"","external_name":"indent","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_con(CON::Builder.new(io, indent))"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Reference","path":"Reference.html","kind":"class","full_name":"Reference","name":"Reference","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"},"ancestors":[{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"any.cr","line_number":314,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/j8r/con/Array","kind":"class","full_name":"Array(T)","name":"Array"},{"html_id":"github.com/j8r/con/CON/PullParser","kind":"class","full_name":"CON::PullParser","name":"PullParser"},{"html_id":"github.com/j8r/con/Hash","kind":"class","full_name":"Hash(K, V)","name":"Hash"},{"html_id":"github.com/j8r/con/Regex","kind":"class","full_name":"Regex","name":"Regex"},{"html_id":"github.com/j8r/con/String","kind":"class","full_name":"String","name":"String"}],"including_types":[],"namespace":null,"doc":"`Reference` is the base class of classes you define in your program.\nIt is set as a class' superclass when you don't specify one:\n\n```\nclass MyClass # < Reference\nend\n```\n\nA reference type is passed by reference: when you pass it to methods,\nreturn it from methods or assign it to variables, a pointer is actually passed.\n\nInvoking `new` on a `Reference` allocates a new instance on the heap.\nThe instance's memory is automatically freed (garbage-collected) when\nthe instance is no longer referred by any other entity in the program.","summary":"<p><code><a href=\"Reference.html\">Reference</a></code> is the base class of classes you define in your program.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"==(other:CON::Any)-instance-method","html_id":"==(other:CON::Any)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L315","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == other.raw"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Regex","path":"Regex.html","kind":"class","full_name":"Regex","name":"Regex","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"any.cr","line_number":332,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Regex` represents a regular expression, a pattern that describes the\ncontents of strings. A `Regex` can determine whether or not a string matches\nits description, and extract the parts of the string that match.\n\nA `Regex` can be created using the literal syntax, in which it is delimited by\nforward slashes (`/`):\n\n```\n/hay/ =~ \"haystack\"   # => 0\n/y/.match(\"haystack\") # => #<Regex::MatchData \"y\">\n```\n\nInterpolation works in regular expression literals just as it does in string\nliterals. Be aware that using this feature will cause an exception to be\nraised at runtime, if the resulting string would not be a valid regular\nexpression.\n\n```\nx = \"a\"\n/#{x}/.match(\"asdf\") # => #<Regex::MatchData \"a\">\nx = \"(\"\n/#{x}/ # raises ArgumentError\n```\n\nWhen we check to see if a particular regular expression describes a string,\nwe can say that we are performing a match or matching one against the other.\nIf we find that a regular expression does describe a string, we say that it\nmatches, and we can refer to a part of the string that was described as\na match.\n\nHere `\"haystack\"` does not contain the pattern `/needle/`, so it doesn't match:\n\n```\n/needle/.match(\"haystack\") # => nil\n```\n\nHere `\"haystack\"` contains the pattern `/hay/`, so it matches:\n\n```\n/hay/.match(\"haystack\") # => #<Regex::MatchData \"hay\">\n```\n\nRegex methods that perform a match usually return a truthy value if there was\na match and `nil` if there was no match. After performing a match, the\nspecial variable `$~` will be an instance of `Regex::MatchData` if it matched, `nil`\notherwise.\n\nWhen matching a regular expression using `=~` (either `String#=~` or\n`Regex#=~`), the returned value will be the index of the first match in the\nstring if the expression matched, `nil` otherwise.\n\n```\n/stack/ =~ \"haystack\"  # => 3\n\"haystack\" =~ /stack/  # => 3\n$~                     # => #<Regex::MatchData \"stack\">\n/needle/ =~ \"haystack\" # => nil\n\"haystack\" =~ /needle/ # => nil\n$~                     # raises Exception\n```\n\nWhen matching a regular expression using `#match` (either `String#match` or\n`Regex#match`), the returned value will be a `Regex::MatchData` if the expression\nmatched, `nil` otherwise.\n\n```\n/hay/.match(\"haystack\")    # => #<Regex::MatchData \"hay\">\n\"haystack\".match(/hay/)    # => #<Regex::MatchData \"hay\">\n$~                         # => #<Regex::MatchData \"hay\">\n/needle/.match(\"haystack\") # => nil\n\"haystack\".match(/needle/) # => nil\n$~                         # raises Exception\n```\n\n[Regular expressions](https://en.wikipedia.org/wiki/Regular_expression)\nhave their own language for describing strings.\n\nMany programming languages and tools implement their own regular expression\nlanguage, but Crystal uses [PCRE](http://www.pcre.org/), a popular C library\nfor providing regular expressions. Here give a brief summary of the most\nbasic features of regular expressions - grouping, repetition, and\nalternation - but the feature set of PCRE extends far beyond these, and we\ndon't attempt to describe it in full here. For more information, refer to\nthe PCRE documentation, especially the\n[full pattern syntax](http://www.pcre.org/original/doc/html/pcrepattern.html)\nor\n[syntax quick reference](http://www.pcre.org/original/doc/html/pcresyntax.html).\n\nThe regular expression language can be used to match much more than just the\nstatic substrings in the above examples. Certain characters, called\n[metacharacters](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC4),\nare given special treatment in regular expressions, and can be used to\ndescribe more complex patterns. To match metacharacters literally in a\nregular expression, they must be escaped by being preceded with a backslash\n(`\\`). `escape` will do this automatically for a given String.\n\nA group of characters (often called a capture group or\n[subpattern](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC14))\ncan be identified by enclosing it in parentheses (`()`). The contents of\neach capture group can be extracted on a successful match:\n\n```\n/a(sd)f/.match(\"_asdf_\")                     # => #<Regex::MatchData \"asdf\" 1:\"sd\">\n/a(sd)f/.match(\"_asdf_\").try &.[1]           # => \"sd\"\n/a(?<grp>sd)f/.match(\"_asdf_\")               # => #<Regex::MatchData \"asdf\" grp:\"sd\">\n/a(?<grp>sd)f/.match(\"_asdf_\").try &.[\"grp\"] # => \"sd\"\n```\n\nCapture groups are indexed starting from 1. Methods that accept a capture\ngroup index will usually also accept 0 to refer to the full match. Capture\ngroups can also be given names, using the `(?&lt;name&gt;...)` syntax, as in the\nprevious example.\n\nFollowing a match, the special variables $N (e.g., $1, $2, $3, ...) can be used\nto access a capture group. Trying to access an invalid capture group will raise an\nexception. Note that it is possible to have a successful match with a nil capture:\n\n```\n/(spice)(s)?/.match(\"spice\") # => #<Regex::MatchData \"spice\" 1:\"spice\" 2:nil>\n$1                           # => \"spice\"\n$2                           # => raises Exception\n```\n\nThis can be mitigated by using the nilable version of the above: $N?,\n(e.g., $1? $2?, $3?, ...). Changing the above to use `$2?` instead of `$2`\nwould return `nil`. `$2?.nil?` would return `true`.\n\nA character or group can be\n[repeated](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC17)\nor made optional using an asterisk (`*` - zero or more), a plus sign\n(`+` - one or more), integer bounds in curly braces\n(`{n,m}`) (at least `n`, no more than `m`), or a question mark\n(`?`) (zero or one).\n\n```\n/fo*/.match(\"_f_\")         # => #<Regex::MatchData \"f\">\n/fo+/.match(\"_f_\")         # => nil\n/fo*/.match(\"_foo_\")       # => #<Regex::MatchData \"foo\">\n/fo{3,}/.match(\"_foo_\")    # => nil\n/fo{1,3}/.match(\"_foo_\")   # => #<Regex::MatchData \"foo\">\n/fo*/.match(\"_foo_\")       # => #<Regex::MatchData \"foo\">\n/fo*/.match(\"_foooooooo_\") # => #<Regex::MatchData \"foooooooo\">\n/fo{,3}/.match(\"_foooo_\")  # => nil\n/f(op)*/.match(\"fopopo\")   # => #<Regex::MatchData \"fopop\" 1: \"op\">\n/foo?bar/.match(\"foobar\")  # => #<Regex::MatchData \"foobar\">\n/foo?bar/.match(\"fobar\")   # => #<Regex::MatchData \"fobar\">\n```\n\nAlternatives can be separated using a\n[vertical bar](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC12)\n(`|`). Any single character can be represented by\n[dot](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC7)\n(`.`). When matching only one character, specific\nalternatives can be expressed as a\n[character class](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC9),\nenclosed in square brackets (`[]`):\n\n```\n/foo|bar/.match(\"foo\")     # => #<Regex::MatchData \"foo\">\n/foo|bar/.match(\"bar\")     # => #<Regex::MatchData \"bar\">\n/_(x|y)_/.match(\"_x_\")     # => #<Regex::MatchData \"_x_\" 1: \"x\">\n/_(x|y)_/.match(\"_y_\")     # => #<Regex::MatchData \"_y_\" 1: \"y\">\n/_(x|y)_/.match(\"_(x|y)_\") # => nil\n/_(x|y)_/.match(\"_(x|y)_\") # => nil\n/_._/.match(\"_x_\")         # => #<Regex::MatchData \"_x_\">\n/_[xyz]_/.match(\"_x_\")     # => #<Regex::MatchData \"_x_\">\n/_[a-z]_/.match(\"_x_\")     # => #<Regex::MatchData \"_x_\">\n/_[^a-z]_/.match(\"_x_\")    # => nil\n/_[^a-wy-z]_/.match(\"_x_\") # => #<Regex::MatchData \"_x_\">\n```\n\nRegular expressions can be defined with these 3\n[optional flags](http://www.pcre.org/original/doc/html/pcreapi.html#SEC11):\n\n* `i`: ignore case (PCRE_CASELESS)\n* `m`: multiline (PCRE_MULTILINE and PCRE_DOTALL)\n* `x`: extended (PCRE_EXTENDED)\n\n```\n/asdf/ =~ \"ASDF\"    # => nil\n/asdf/i =~ \"ASDF\"   # => 0\n/^z/i =~ \"ASDF\\nZ\"  # => nil\n/^z/im =~ \"ASDF\\nZ\" # => 5\n```\n\nPCRE supports other encodings, but Crystal strings are UTF-8 only, so Crystal\nregular expressions are also UTF-8 only (by default).\n\nPCRE optionally permits named capture groups (named subpatterns) to not be\nunique. Crystal exposes the name table of a `Regex` as a\n`Hash` of `String` => `Int32`, and therefore requires named capture groups to have\nunique names within a single `Regex`.","summary":"<p>A <code><a href=\"Regex.html\">Regex</a></code> represents a regular expression, a pattern that describes the contents of strings.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"===(other:CON::Any)-instance-method","html_id":"===(other:CON::Any)-instance-method","name":"===","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L333","def":{"name":"===","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = self === other.raw\n$~ = $~\nvalue\n"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Set","path":"Set.html","kind":"struct","full_name":"Set(T)","name":"Set","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/j8r/con/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":71,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/j8r/con/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Set` implements a collection of unordered values with no duplicates.\n\nAn `Enumerable` object can be converted to `Set` using the `#to_set` method.\n\n`Set` uses `Hash` as storage, so you must note the following points:\n\n* Equality of elements is determined according to `Object#==` and `Object#hash`.\n* `Set` assumes that the identity of each element does not change while it is stored. Modifying an element of a set will render the set to an unreliable state.\n\n### Example\n\n```\ns1 = Set{1, 2}\ns2 = [1, 2].to_set\ns3 = Set.new [1, 2]\ns1 == s2 # => true\ns1 == s3 # => true\ns1.add(2)\ns1.concat([6, 8])\ns1.subset? s2 # => false\ns2.subset? s1 # => true\n```","summary":"<p><code><a href=\"Set.html\">Set</a></code> implements a collection of unordered values with no duplicates.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L72","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.array do\n  each do |element|\n    con.value(element)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":49,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[],"constructors":[{"id":"from_con(pull:CON::PullParser):String-class-method","html_id":"from_con(pull:CON::PullParser):String-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : String","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L9","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.from_con(pull.read_value, pull)"}}],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L50","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.string(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Symbol","path":"Symbol.html","kind":"struct","full_name":"Symbol","name":"Symbol","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":55,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A symbol is a constant that is identified by a name without you having to give\nit a numeric value.\n\n```\n:hello\n:welcome\n:\"123\"\n:\"symbol with spaces\"\n```\n\nInternally a symbol is represented as an `Int32`, so it's very efficient.\n\nYou can't dynamically create symbols. When you compile your program, each symbol\ngets assigned a unique number.","summary":"<p>A symbol is a constant that is identified by a name without you having to give it a numeric value.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L56","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.string(to_s)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Time","path":"Time.html","kind":"struct","full_name":"Time","name":"Time","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":112,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":201,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"See https://github.com/crystal-lang/crystal/blob/master/src/json/to_json.cr","summary":"<p>See https://github.com/crystal-lang/crystal/blob/master/src/json/to_json.cr</p>","class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L206","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Time::Format::ISO_8601_DATE_TIME.parse(pull.expect(value, String))"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L202","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Time.from_con(pull.read_value, pull)"}}],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L113","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(Format::RFC_3339.format(self, fraction_digits: 0)).to_con(con)"}}],"macros":[],"types":[{"html_id":"github.com/j8r/con/Time/EpochConverter","path":"Time/EpochConverter.html","kind":"module","full_name":"Time::EpochConverter","name":"EpochConverter","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"to_con.cr","line_number":123,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":220,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":null,"summary":null,"class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L225","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Time.unix(pull.type_error(value, Int64))"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L221","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"EpochConverter.from_con(pull.read_value, pull)"}},{"id":"to_con(value:Time,con:CON::Builder)-class-method","html_id":"to_con(value:Time,con:CON::Builder)-class-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(value : Time, con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L124","def":{"name":"to_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_unix.to_con(con)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Time/EpochMillisConverter","path":"Time/EpochMillisConverter.html","kind":"module","full_name":"Time::EpochMillisConverter","name":"EpochMillisConverter","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"to_con.cr","line_number":129,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":230,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":null,"summary":null,"class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L235","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Time.unix_ms(pull.except(value, Int64))"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L231","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"EpochConverter.from_con(pull.read_value, pull)"}},{"id":"to_con(value:Time,con:CON::Builder)-class-method","html_id":"to_con(value:Time,con:CON::Builder)-class-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(value : Time, con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L130","def":{"name":"to_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_unix_ms.to_con(con)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Time/Format","path":"Time/Format.html","kind":"struct","full_name":"Time::Format","name":"Format","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":117,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":210,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/j8r/con/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":"Specifies the format to convert a `Time` to and from a `String`.\n\nThe pattern of a format is a `String` with directives. Directives\nbeing with a percent (`%`) character. Any text not listed as a directive\nwill be passed/parsed through the output/input string.\n\nThe directives are:\n\n* **%a**: short day name (Sun, Mon, Tue, ...)\n* **%^a**: short day name, upcase (SUN, MON, TUE, ...)\n* **%A**: day name (Sunday, Monday, Tuesday, ...)\n* **%^A**: day name, upcase (SUNDAY, MONDAY, TUESDAY, ...)\n* **%b**: short month name (Jan, Feb, Mar, ...)\n* **%^b**: short month name, upcase (JAN, FEB, MAR, ...)\n* **%B**: month name (January, February, March, ...)\n* **%^B**: month name, upcase (JANUARY, FEBRUARY, MARCH, ...)\n* **%c**: date and time (Tue Apr  5 10:26:19 2016)\n* **%C**: year divided by 100\n* **%d**: day of month, zero padded (01, 02, ...)\n* **%-d**: day of month (1, 2, ..., 31)\n* **%D**: date (04/05/16)\n* **%e**: day of month, blank padded (\" 1\", \" 2\", ..., \"10\", \"11\", ...)\n* **%F**: ISO 8601 date (2016-04-05)\n* **%g**: week-based calendar year modulo 100 (00..99)\n* **%G**: week-based calendar year (0001..9999)\n* **%h**: (same as %b) short month name (Jan, Feb, Mar, ...)\n* **%H**: hour of the day, 24-hour clock, zero padded (00, 01, ..., 24)\n* **%I**: hour of the day, 12-hour clock, zero padded (00, 01, ..., 12)\n* **%j**: day of year, zero padded (001, 002, ..., 365)\n* **%k**: hour of the day, 24-hour clock, blank padded (\" 0\", \" 1\", ..., \"24\")\n* **%l**: hour of the day, 12-hour clock, blank padded (\" 0\", \" 1\", ..., \"12\")\n* **%L**: milliseconds, zero padded (000, 001, ..., 999) (same as **%3N**)\n* **%m**: month number, zero padded (01, 02, ..., 12)\n* **%_m**: month number, blank padded (\" 1\", \" 2\", ..., \"12\")\n* **%-m**: month number (1, 2, ..., 12)\n* **%M**: minute, zero padded (00, 01, 02, ..., 59)\n* **%3N**: milliseconds, zero padded (000, 001, ..., 999) (same as **%L**)\n* **%6N**: microseconds, zero padded (000000, 000001, ..., 999999)\n* **%9N**: nanoseconds, zero padded (000000000, 000000001, ..., 999999999)\n* **%N**: second fraction, zero padded. (Same as `%9N` but may consume more than 9 digits while parsing)\n* **%p**: am-pm (lowercase)\n* **%P**: AM-PM (uppercase)\n* **%r**: 12-hour time (03:04:05 AM)\n* **%R**: 24-hour time (13:04)\n* **%s**: seconds since unix epoch (see `Time#to_unix`)\n* **%S**: seconds, zero padded (00, 01, ..., 59)\n* **%T**: 24-hour time (13:04:05)\n* **%u**: day of week (Monday is 1, 1..7)\n* **%V**: ISO calendar week number of the week-based year (01..53)\n* **%w**: day of week (Sunday is 0, 0..6)\n* **%x**: (same as %D) date (04/05/16)\n* **%X**: (same as %T) 24-hour time (13:04:05)\n* **%y**: year modulo 100\n* **%Y**: year, zero padded\n* **%z**: time zone as hour and minute offset from UTC (+0900)\n* **%:z**: time zone as hour and minute offset from UTC with a colon (+09:00)\n* **%::z**: time zone as hour, minute and second offset from UTC with a colon (+09:00:00)","summary":"<p>Specifies the format to convert a <code><a href=\"../Time.html\">Time</a></code> to and from a <code><a href=\"../String.html\">String</a></code>.</p>","class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L215","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"parse(pull.expect(value, String), Time::Location::UTC)"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L211","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Format.from_con(pull.read_value, pull)"}}],"constructors":[],"instance_methods":[{"id":"to_con(value:Time,con:CON::Builder)-instance-method","html_id":"to_con(value:Time,con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(value : Time, con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L118","def":{"name":"to_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(format(value)).to_con(con)"}}],"macros":[],"types":[]}]},{"html_id":"github.com/j8r/con/Tuple","path":"Tuple.html","kind":"struct","full_name":"Tuple(*T)","name":"Tuple","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/j8r/con/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/j8r/con/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"to_con.cr","line_number":91,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr"},{"filename":"from_con.cr","line_number":75,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/j8r/con/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/j8r/con/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A tuple is a fixed-size, immutable, stack-allocated sequence of values\nof possibly different types.\n\nYou can think of a `Tuple` as an immutable `Array` whose types for each position\nare known at compile time.\n\nA tuple can be created with the usual `new` method or with a tuple literal:\n\n```\ntuple = {1, \"hello\", 'x'} # Tuple(Int32, String, Char)\ntuple[0]                  # => 1\ntuple[1]                  # => \"hello\"\ntuple[2]                  # => 'x'\n```\n\nThe compiler knows what types are in each position, so when indexing\na tuple with an integer literal the compiler will return\nthe value in that index and with the expected type, like in the above\nsnippet. Indexing with an integer literal outside the bounds of the tuple\nwill give a compile-time error.\n\nIndexing with an integer value that is only known at runtime will return\na value whose type is the union of all the types in the tuple, and might raise\n`IndexError`.\n\nTuples are the preferred way to return fixed-size multiple return\nvalues because no memory is needed to be allocated for them:\n\n```\ndef one_and_hello\n  {1, \"hello\"}\nend\n\none, hello = one_and_hello\none   # => 1\nhello # => \"hello\"\n```\n\nGood examples of the above are `Number#divmod` and `Enumerable#minmax`.\n\nTuples can be splat with the `*` operator and passed to methods:\n\n```\ndef multiply(string, value)\n  string * value\nend\n\ntuple = {\"hey\", 2}\nvalue = multiply(*tuple) # same as multiply tuple[0], tuple[1]\nvalue                    # => \"heyhey\"\n```\n\nFinally, when using a splat argument in a method definition its type\nwill be a tuple of the call arguments:\n\n```\ndef splat_test(*args)\n  args\nend\n\ntuple = splat_test 1, \"hello\", 'x'\ntuple.class # => Tuple(Int32, String, Char)\ntuple       # => {1, \"hello\", 'x'}\n```","summary":"<p>A tuple is a fixed-size, immutable, stack-allocated sequence of values of possibly different types.</p>","class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L83","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n    tuple = Tuple.new(\n      {% for i in 0...T.size %}\n        (self[{{ i }}].from_con(pull.read_value_unchecked, pull)),\n      {% end %}\n    )\n    if !(value = pull.read_value_unchecked).is_a? CON::Token::EndArray\n      pull.type_error value, CON::Token::EndArray\n    end\n    tuple\n    {% end %}"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L76","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !(value = pull.read_value_unchecked).is_a?(CON::Token::BeginArray)\n  pull.type_error(value, CON::Token::BeginArray)\nend\nT.from_con(nil, pull)\n"}}],"constructors":[],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/to_con.cr#L92","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"con.array do\n  {% for i in 0...T.size %}\n      con.value self[{{ i }}]\n      {% end %}\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Union","path":"Union.html","kind":"struct","full_name":"Union(*T)","name":"Union","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"from_con.cr","line_number":164,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A union type represents the possibility of a variable or an expression\nhaving more than one possible type at compile time.\n\nWhen invoking a method on a union type, the language checks that the\nmethod exists and can be resolved (typed) for each type in the union.\nFor this reason, adding instance methods to `Union` makes no sense and\nhas no effect. However, adding class method to `Union` is possible\nand can be useful. One example is parsing `JSON` into one of many\npossible types.\n\nUnion is special in that it is a generic type but instantiating it\nmight not return a union type:\n\n```\nUnion(Int32 | String)      # => (Int32 | String)\nUnion(Int32)               # => Int32\nUnion(Int32, Int32, Int32) # => Int32\n```","summary":"<p>A union type represents the possibility of a variable or an expression having more than one possible type at compile time.</p>","class_methods":[{"id":"from_con(value,pull:CON::PullParser)-class-method","html_id":"from_con(value,pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L169","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n     case value\n    {% for type in T %}\n    {% if type.stringify.starts_with?(\"Array(\") %}when CON::Token::BeginArray then {{ type.id }}.from_con value, pull\n    {% else %}{% if type.stringify.starts_with?(\"Hash(\") %}when CON::Token::BeginHash then {{ type.id }}.from_con value, pull\n    {% else %}when {{ type.id }} then  {{ type.id }}.from_con value, pull\n    {% end %}{% end %}\n    {% end %}\n    else pull.expect value, {{ (T.join(\" | \")).id }}\n    end\n    {% end %}"}},{"id":"from_con(pull:CON::PullParser)-class-method","html_id":"from_con(pull:CON::PullParser)-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/from_con.cr#L165","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.from_con(pull.read_value, pull)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/UUID","path":"UUID.html","kind":"struct","full_name":"UUID","name":"UUID","abstract":false,"superclass":{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/con/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/con/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"uuid.cr","line_number":21,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/uuid.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Adds CON support to `UUID` for use in a CON mapping.\n\nNOTE: `require \"uuid/con\"` is required to opt-in to this feature.\n\n```\nrequire \"con\"\nrequire \"uuid\"\nrequire \"uuid/con\"\n\nclass Example\n  CON.mapping id: UUID\nend\n\nexample = Example.from_con(%({\"id\": \"ba714f86-cac6-42c7-8956-bcf5105e1b81\"}))\n\nuuid = UUID.new(\"87b3042b-9b9a-41b7-8b15-a93d3f17025e\")\nuuid.to_con # => \"87b3042b-9b9a-41b7-8b15-a93d3f17025e\"\n```","summary":"<p>Adds CON support to <code><a href=\"UUID.html\">UUID</a></code> for use in a CON mapping.</p>","class_methods":[],"constructors":[{"id":"from_con(value,pull:CON::PullParser):UUID-class-method","html_id":"from_con(value,pull:CON::PullParser):UUID-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(value, pull : CON::PullParser) : UUID","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/uuid.cr#L26","def":{"name":"from_con","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UUID","visibility":"Public","body":"new(pull.expect(value, String))"}},{"id":"from_con(pull:CON::PullParser):UUID-class-method","html_id":"from_con(pull:CON::PullParser):UUID-class-method","name":"from_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"args_string":"(pull : CON::PullParser) : UUID","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/uuid.cr#L22","def":{"name":"from_con","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"CON::PullParser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UUID","visibility":"Public","body":"UUID.from_con(pull.read_value, pull)"}}],"instance_methods":[{"id":"to_con(con:CON::Builder)-instance-method","html_id":"to_con(con:CON::Builder)-instance-method","name":"to_con","doc":null,"summary":null,"abstract":false,"args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"args_string":"(con : CON::Builder)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/uuid.cr#L30","def":{"name":"to_con","args":[{"name":"con","doc":null,"default_value":"","external_name":"con","restriction":"CON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_s.to_con(con)"}}],"macros":[],"types":[]},{"html_id":"github.com/j8r/con/Value","path":"Value.html","kind":"struct","full_name":"Value","name":"Value","abstract":true,"superclass":{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"},"ancestors":[{"html_id":"github.com/j8r/con/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"any.cr","line_number":308,"url":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr"}],"repository_name":"github.com/j8r/con","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/j8r/con/Bool","kind":"struct","full_name":"Bool","name":"Bool"},{"html_id":"github.com/j8r/con/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/j8r/con/NamedTuple","kind":"struct","full_name":"NamedTuple(**T)","name":"NamedTuple"},{"html_id":"github.com/j8r/con/Nil","kind":"struct","full_name":"Nil","name":"Nil"},{"html_id":"github.com/j8r/con/Symbol","kind":"struct","full_name":"Symbol","name":"Symbol"},{"html_id":"github.com/j8r/con/Tuple","kind":"struct","full_name":"Tuple(*T)","name":"Tuple"},{"html_id":"github.com/j8r/con/Union","kind":"struct","full_name":"Union(*T)","name":"Union"}],"including_types":[],"namespace":null,"doc":"`Value` is the base type of the primitive types (`Nil`, `Bool`, `Char`, `Number`),\n`Symbol`, `Pointer`, `Tuple`, `StaticArray` and all structs.\n\nA `Value` is passed by value: when you pass it to methods,\nreturn it from methods or assign it to variables, a copy\nof the value is actually passed.\nThis is not important for nil, bools, integers, floats, symbols,\npointers and tuples, because they are immutable, but with a mutable\n`Struct` or with a `StaticArray` you have to be careful. Read their\ndocumentation to learn more about this.","summary":"<p><code><a href=\"Value.html\">Value</a></code> is the base type of the primitive types (<code><a href=\"Nil.html\">Nil</a></code>, <code><a href=\"Bool.html\">Bool</a></code>, <code>Char</code>, <code>Number</code>), <code><a href=\"Symbol.html\">Symbol</a></code>, <code>Pointer</code>, <code><a href=\"Tuple.html\">Tuple</a></code>, <code>StaticArray</code> and all structs.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"==(other:CON::Any)-instance-method","html_id":"==(other:CON::Any)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"args_string":"(other : CON::Any)","source_link":"https://github.com/j8r/con/blob/5480d5efaf4d8b2ca7debd1041e226f08921214e/src/any.cr#L309","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"CON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == other.raw"}}],"macros":[],"types":[]}]}})